/*
 * This file is generated by jOOQ.
 */
package com.shf.jooq.tables;


import com.shf.jooq.db.Demo;
import com.shf.jooq.records.SampleRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sample extends TableImpl<SampleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>demo.sample</code>
     */
    public static final Sample SAMPLE = new Sample();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SampleRecord> getRecordType() {
        return SampleRecord.class;
    }

    /**
     * The column <code>demo.sample.name</code>.
     */
    public final TableField<SampleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>demo.sample.address</code>.
     */
    public final TableField<SampleRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>demo.sample.city</code>.
     */
    public final TableField<SampleRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100), this, "");

    private Sample(Name alias, Table<SampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sample(Name alias, Table<SampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>demo.sample</code> table reference
     */
    public Sample(String alias) {
        this(DSL.name(alias), SAMPLE);
    }

    /**
     * Create an aliased <code>demo.sample</code> table reference
     */
    public Sample(Name alias) {
        this(alias, SAMPLE);
    }

    /**
     * Create a <code>demo.sample</code> table reference
     */
    public Sample() {
        this(DSL.name("sample"), null);
    }

    public <O extends Record> Sample(Table<O> child, ForeignKey<O, SampleRecord> key) {
        super(child, key, SAMPLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Demo.DEMO;
    }

    @Override
    public Sample as(String alias) {
        return new Sample(DSL.name(alias), this);
    }

    @Override
    public Sample as(Name alias) {
        return new Sample(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(String name) {
        return new Sample(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(Name name) {
        return new Sample(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
